// Code generated by mockery v2.52.1. DO NOT EDIT.

package mock

import (
	context "context"

	clientminio "gitlab.bcc.kz/digital-banking-platform/microservices/billing/dbp-ext-requests-billing-system/server/store/client/minio"

	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// MinIOClientServicesMock is an autogenerated mock type for the MinIOClientServices type
type MinIOClientServicesMock struct {
	mock.Mock
}

type MinIOClientServicesMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MinIOClientServicesMock) EXPECT() *MinIOClientServicesMock_Expecter {
	return &MinIOClientServicesMock_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinIOClientServicesMock) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (clientminio.MinIOObjServices, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 clientminio.MinIOObjServices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (clientminio.MinIOObjServices, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) clientminio.MinIOObjServices); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientminio.MinIOObjServices)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinIOClientServicesMock_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MinIOClientServicesMock_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MinIOClientServicesMock_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinIOClientServicesMock_GetObject_Call {
	return &MinIOClientServicesMock_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinIOClientServicesMock_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MinIOClientServicesMock_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MinIOClientServicesMock_GetObject_Call) Return(_a0 clientminio.MinIOObjServices, _a1 error) *MinIOClientServicesMock_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinIOClientServicesMock_GetObject_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (clientminio.MinIOObjServices, error)) *MinIOClientServicesMock_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MinIOClientServicesMock) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinIOClientServicesMock_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MinIOClientServicesMock_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
//   - opts minio.PutObjectOptions
func (_e *MinIOClientServicesMock_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}, opts interface{}) *MinIOClientServicesMock_PutObject_Call {
	return &MinIOClientServicesMock_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize, opts)}
}

func (_c *MinIOClientServicesMock_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions)) *MinIOClientServicesMock_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MinIOClientServicesMock_PutObject_Call) Return(err error) *MinIOClientServicesMock_PutObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MinIOClientServicesMock_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error) *MinIOClientServicesMock_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMinIOClientServicesMock creates a new instance of MinIOClientServicesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinIOClientServicesMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinIOClientServicesMock {
	mock := &MinIOClientServicesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


// Code generated by mockery v2.52.1. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MinIOObjServicesMock is an autogenerated mock type for the MinIOObjServices type
type MinIOObjServicesMock struct {
	mock.Mock
}

type MinIOObjServicesMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MinIOObjServicesMock) EXPECT() *MinIOObjServicesMock_Expecter {
	return &MinIOObjServicesMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MinIOObjServicesMock) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinIOObjServicesMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MinIOObjServicesMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MinIOObjServicesMock_Expecter) Close() *MinIOObjServicesMock_Close_Call {
	return &MinIOObjServicesMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MinIOObjServicesMock_Close_Call) Run(run func()) *MinIOObjServicesMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MinIOObjServicesMock_Close_Call) Return(_a0 error) *MinIOObjServicesMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MinIOObjServicesMock_Close_Call) RunAndReturn(run func() error) *MinIOObjServicesMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *MinIOObjServicesMock) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinIOObjServicesMock_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MinIOObjServicesMock_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MinIOObjServicesMock_Expecter) Read(p interface{}) *MinIOObjServicesMock_Read_Call {
	return &MinIOObjServicesMock_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MinIOObjServicesMock_Read_Call) Run(run func(p []byte)) *MinIOObjServicesMock_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MinIOObjServicesMock_Read_Call) Return(n int, err error) *MinIOObjServicesMock_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MinIOObjServicesMock_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MinIOObjServicesMock_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMinIOObjServicesMock creates a new instance of MinIOObjServicesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinIOObjServicesMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinIOObjServicesMock {
	mock := &MinIOObjServicesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
